{"ast":null,"code":"const songSentimentService = {\n  //Response is array of songs with id, title, artist and thumbnail\n  searchForSongs: async function (songName) {\n    return new Promise((resolve, reject) => {\n      var jsonObject = {\n        \"songName\": songName\n      };\n      const xhr = new XMLHttpRequest();\n\n      xhr.onload = () => {\n        const response = JSON.parse(xhr.responseText);\n        resolve(response);\n      };\n\n      xhr.onerror = () => {\n        reject(\"The Song Search Request to the API of this Song Sentiment Service Failed. Sorry.\");\n      };\n\n      xhr.open(\"POST\", 'http://localhost:5001/song', true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(jsonObject));\n    }).catch(err => {\n      alert(err);\n    });\n  },\n  getSentimentValueForSong: async function (songJSON) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onload = () => {\n        const sentimentRating = xhr.responseText;\n        resolve(sentimentRating);\n      };\n\n      xhr.onerror = () => {\n        reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\");\n      };\n\n      xhr.open(\"POST\", 'http://localhost:5001/song/sentiment', true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      var postJSON = {\n        \"songName\": songJSON.title,\n        \"songAuthor\": songJSON.artist\n      };\n      xhr.send(JSON.stringify(postJSON));\n    }).catch(err => {\n      alert(err);\n    });\n  },\n  getHighestSentimentSongs: async function () {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onload = () => {\n        var resultJSON = JSON.parse(xhr.responseText);\n        resolve(resultJSON);\n      };\n\n      xhr.onerror = () => {\n        reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\");\n      };\n\n      xhr.open(\"GET\", 'http://localhost:5001/song/highest', true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send();\n    }).catch(err => {\n      alert(err);\n    });\n  },\n  getLowestSentimentSongs: async function () {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onload = () => {\n        var resultJSON = JSON.parse(xhr.responseText);\n        resolve(resultJSON);\n      };\n\n      xhr.onerror = () => {\n        reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\");\n      };\n\n      xhr.open(\"GET\", 'http://localhost:5001/song/lowest', true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send();\n    }).catch(err => {\n      alert(err);\n    });\n  }\n};\nexport default songSentimentService;","map":{"version":3,"names":["songSentimentService","searchForSongs","songName","Promise","resolve","reject","jsonObject","xhr","XMLHttpRequest","onload","response","JSON","parse","responseText","onerror","open","setRequestHeader","send","stringify","catch","err","alert","getSentimentValueForSong","songJSON","sentimentRating","postJSON","title","artist","getHighestSentimentSongs","resultJSON","getLowestSentimentSongs"],"sources":["/root/Desktop/song-sentiment-service/song-sentiment-frontend-redo/src/songSentimentService.js"],"sourcesContent":["const songSentimentService = {\n\n    //Response is array of songs with id, title, artist and thumbnail\n    searchForSongs: async function(songName){\n        return new Promise((resolve, reject) => {\n            var jsonObject = { \"songName\": songName};\n            const xhr = new XMLHttpRequest();\n            xhr.onload = () => {\n                const response = JSON.parse(xhr.responseText);\n                resolve(response);\n            };\n            xhr.onerror = () => {\n                reject(\"The Song Search Request to the API of this Song Sentiment Service Failed. Sorry.\")\n            }\n            xhr.open(\"POST\", 'http://localhost:5001/song', true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.send(JSON.stringify(jsonObject));\n        }).catch((err) => {\n            alert(err)\n        })\n    },\n\n    getSentimentValueForSong: async function(songJSON){\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.onload = () => {\n                const sentimentRating = xhr.responseText;\n                resolve(sentimentRating);\n            }\n            xhr.onerror = () => {\n                reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\")\n            }\n            xhr.open(\"POST\", 'http://localhost:5001/song/sentiment', true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            var postJSON = {\n                \"songName\": songJSON.title,\n                \"songAuthor\": songJSON.artist\n              }\n            xhr.send(JSON.stringify(postJSON));        \n        }).catch((err) => {\n            alert(err)\n        })\n    },\n\n    getHighestSentimentSongs: async function(){\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.onload = () => {\n                var resultJSON = JSON.parse(xhr.responseText);\n                resolve(resultJSON);\n            }\n            xhr.onerror = () => {\n                reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\")\n            }\n\n            xhr.open(\"GET\", 'http://localhost:5001/song/highest', true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.send();\n            \n        }).catch((err) => {\n            alert(err)\n        })\n    },\n\n    getLowestSentimentSongs: async function(){\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n\n            xhr.onload = () => {\n                var resultJSON = JSON.parse(xhr.responseText);\n                resolve(resultJSON);\n            }\n            xhr.onerror = () => {\n                reject(\"The Song Sentiment Request to the API of this Song Sentiment Service Failed. Sorry.\")\n            }\n            \n            xhr.open(\"GET\", 'http://localhost:5001/song/lowest', true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.send();\n            \n        }).catch((err) => {\n            alert(err)\n        })\n    }\n\n\n}\n\nexport default songSentimentService;"],"mappings":"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"},"metadata":{},"sourceType":"module"}